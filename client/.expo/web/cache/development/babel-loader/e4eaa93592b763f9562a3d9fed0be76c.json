{"ast":null,"code":"var orderWatcher_pb = require(\"./orderWatcher_pb\");\n\nvar grpc = require(\"@improbable-eng/grpc-web\").grpc;\n\nvar OrderWatcher = function () {\n  function OrderWatcher() {}\n\n  OrderWatcher.serviceName = \"protos.OrderWatcher\";\n  return OrderWatcher;\n}();\n\nOrderWatcher.Subscribe = {\n  methodName: \"Subscribe\",\n  service: OrderWatcher,\n  requestStream: false,\n  responseStream: true,\n  requestType: orderWatcher_pb.Request,\n  responseType: orderWatcher_pb.Response\n};\nOrderWatcher.Unsubscribe = {\n  methodName: \"Unsubscribe\",\n  service: OrderWatcher,\n  requestStream: false,\n  responseStream: false,\n  requestType: orderWatcher_pb.Request,\n  responseType: orderWatcher_pb.Response\n};\nexports.OrderWatcher = OrderWatcher;\n\nfunction OrderWatcherClient(serviceHost, options) {\n  this.serviceHost = serviceHost;\n  this.options = options || {};\n}\n\nOrderWatcherClient.prototype.subscribe = function subscribe(requestMessage, metadata) {\n  var listeners = {\n    data: [],\n    end: [],\n    status: []\n  };\n  var client = grpc.invoke(OrderWatcher.Subscribe, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onMessage: function onMessage(responseMessage) {\n      listeners.data.forEach(function (handler) {\n        handler(responseMessage);\n      });\n    },\n    onEnd: function onEnd(status, statusMessage, trailers) {\n      listeners.status.forEach(function (handler) {\n        handler({\n          code: status,\n          details: statusMessage,\n          metadata: trailers\n        });\n      });\n      listeners.end.forEach(function (handler) {\n        handler({\n          code: status,\n          details: statusMessage,\n          metadata: trailers\n        });\n      });\n      listeners = null;\n    }\n  });\n  return {\n    on: function on(type, handler) {\n      listeners[type].push(handler);\n      return this;\n    },\n    cancel: function cancel() {\n      listeners = null;\n      client.close();\n    }\n  };\n};\n\nOrderWatcherClient.prototype.unsubscribe = function unsubscribe(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(OrderWatcher.Unsubscribe, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function onEnd(response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function cancel() {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nexports.OrderWatcherClient = OrderWatcherClient;","map":{"version":3,"sources":["C:/work/programming/orderinfo/client/_proto/orderWatcher_pb_service.js"],"names":["orderWatcher_pb","require","grpc","OrderWatcher","serviceName","Subscribe","methodName","service","requestStream","responseStream","requestType","Request","responseType","Response","Unsubscribe","exports","OrderWatcherClient","serviceHost","options","prototype","subscribe","requestMessage","metadata","listeners","data","end","status","client","invoke","request","host","transport","debug","onMessage","responseMessage","forEach","handler","onEnd","statusMessage","trailers","code","details","on","type","push","cancel","close","unsubscribe","callback","arguments","length","unary","response","Code","OK","err","Error","message"],"mappings":"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","sourcesContent":["// package: protos\n// file: orderWatcher.proto\n\nvar orderWatcher_pb = require(\"./orderWatcher_pb\");\nvar grpc = require(\"@improbable-eng/grpc-web\").grpc;\n\nvar OrderWatcher = (function () {\n  function OrderWatcher() {}\n  OrderWatcher.serviceName = \"protos.OrderWatcher\";\n  return OrderWatcher;\n}());\n\nOrderWatcher.Subscribe = {\n  methodName: \"Subscribe\",\n  service: OrderWatcher,\n  requestStream: false,\n  responseStream: true,\n  requestType: orderWatcher_pb.Request,\n  responseType: orderWatcher_pb.Response\n};\n\nOrderWatcher.Unsubscribe = {\n  methodName: \"Unsubscribe\",\n  service: OrderWatcher,\n  requestStream: false,\n  responseStream: false,\n  requestType: orderWatcher_pb.Request,\n  responseType: orderWatcher_pb.Response\n};\n\nexports.OrderWatcher = OrderWatcher;\n\nfunction OrderWatcherClient(serviceHost, options) {\n  this.serviceHost = serviceHost;\n  this.options = options || {};\n}\n\nOrderWatcherClient.prototype.subscribe = function subscribe(requestMessage, metadata) {\n  var listeners = {\n    data: [],\n    end: [],\n    status: []\n  };\n  var client = grpc.invoke(OrderWatcher.Subscribe, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onMessage: function (responseMessage) {\n      listeners.data.forEach(function (handler) {\n        handler(responseMessage);\n      });\n    },\n    onEnd: function (status, statusMessage, trailers) {\n      listeners.status.forEach(function (handler) {\n        handler({ code: status, details: statusMessage, metadata: trailers });\n      });\n      listeners.end.forEach(function (handler) {\n        handler({ code: status, details: statusMessage, metadata: trailers });\n      });\n      listeners = null;\n    }\n  });\n  return {\n    on: function (type, handler) {\n      listeners[type].push(handler);\n      return this;\n    },\n    cancel: function () {\n      listeners = null;\n      client.close();\n    }\n  };\n};\n\nOrderWatcherClient.prototype.unsubscribe = function unsubscribe(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n  var client = grpc.unary(OrderWatcher.Unsubscribe, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nexports.OrderWatcherClient = OrderWatcherClient;\n\n"]},"metadata":{},"sourceType":"script"}