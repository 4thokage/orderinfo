{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\work\\\\programming\\\\orderinfo\\\\client\\\\App.tsx\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { OrderWatcher, OrderWatcherClient } from \"./_proto/orderWatcher_pb_service\";\nimport { Request } from \"./_proto/orderWatcher_pb\";\nimport { grpc } from \"@improbable-eng/grpc-web\";\nimport { ReactNativeTransport } from '@improbable-eng/grpc-web-react-native-transport';\nexport default function App() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var host = \"http://localhost:8080\";\n  var grpcClient = new OrderWatcherClient(host);\n  useEffect(function () {\n    (function () {\n      var customer = new Request();\n      customer.setId(1);\n      var orderStream = grpcClient.subscribe(customer);\n      orderStream.on(\"data\", function (chunk) {\n        var msg = chunk.toObject();\n        console.log(msg);\n        setMessages(function (prev) {\n          return [].concat(_toConsumableArray(prev), [msg]);\n        });\n      });\n    })();\n\n    grpc.invoke(OrderWatcher.Subscribe, {\n      request: customer,\n      host: host,\n      transport: ReactNativeTransport({\n        withCredentials: false\n      }),\n      onMessage: function onMessage(message) {\n        console.log(\"got book: \", message.toObject());\n      },\n      onEnd: function onEnd(code, msg, trailers) {\n        if (code == grpc.Code.OK) {\n          console.log(\"all ok\");\n        } else {\n          console.log(\"hit an error\", code, msg, trailers);\n        }\n      }\n    });\n  }, []);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, \"Open up App.tsx to start working on your app!\"), React.createElement(StatusBar, {\n    style: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/work/programming/orderinfo/client/App.tsx"],"names":["StatusBar","React","useEffect","useState","OrderWatcher","OrderWatcherClient","Request","grpc","ReactNativeTransport","App","messages","setMessages","host","grpcClient","customer","setId","orderStream","subscribe","on","chunk","msg","toObject","console","log","prev","invoke","Subscribe","request","transport","withCredentials","onMessage","message","onEnd","code","trailers","Code","OK","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;;AAAA,SAAQA,SAAR,QAAwB,iBAAxB;AACA,OAAOC,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;;;;AAEA,SAAQC,YAAR,EAAsBC,kBAAtB;AACA,SAAQC,OAAR;AACA,SAAQC,IAAR,QAAmB,0BAAnB;AACA,SAAQC,oBAAR,QAAmC,iDAAnC;AAEA,eAAe,SAASC,GAAT,GAAe;AAC1B,kBAAgCN,QAAQ,CAAgC,EAAhC,CAAxC;AAAA;AAAA,MAAOO,QAAP;AAAA,MAAiBC,WAAjB;;AAEA,MAAMC,IAAI,GAAG,uBAAb;AACA,MAAMC,UAAU,GAAG,IAAIR,kBAAJ,CAAuBO,IAAvB,CAAnB;AAGAV,EAAAA,SAAS,CAAC,YAAM;AAIZ,KAAC,YAAM;AACH,UAAMY,QAAQ,GAAG,IAAIR,OAAJ,EAAjB;AACAQ,MAAAA,QAAQ,CAACC,KAAT,CAAe,CAAf;AACA,UAAMC,WAAW,GAAGH,UAAU,CAACI,SAAX,CAAqBH,QAArB,CAApB;AACAE,MAAAA,WAAW,CAACE,EAAZ,CAAe,MAAf,EAAuB,UAACC,KAAD,EAAW;AAC9B,YAAMC,GAAG,GAAID,KAAD,CAAyBE,QAAzB,EAAZ;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAT,QAAAA,WAAW,CAAC,UAACa,IAAD;AAAA,8CAAcA,IAAd,IAAoBJ,GAApB;AAAA,SAAD,CAAX;AACH,OAJD;AAKH,KATD;;AAWAb,IAAAA,IAAI,CAACkB,MAAL,CAAYrB,YAAY,CAACsB,SAAzB,EAAoC;AAClCC,MAAAA,OAAO,EAAEb,QADyB;AAElCF,MAAAA,IAAI,EAAEA,IAF4B;AAGlCgB,MAAAA,SAAS,EAAEpB,oBAAoB,CAAC;AAAEqB,QAAAA,eAAe,EAAE;AAAnB,OAAD,CAHG;AAIlCC,MAAAA,SAAS,EAAE,mBAACC,OAAD,EAAkB;AAC3BT,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BQ,OAAO,CAACV,QAAR,EAA1B;AACD,OANiC;AAOlCW,MAAAA,KAAK,EAAE,eAACC,IAAD,EAAkBb,GAAlB,EAA2Cc,QAA3C,EAAuE;AAC5E,YAAID,IAAI,IAAI1B,IAAI,CAAC4B,IAAL,CAAUC,EAAtB,EAA0B;AACxBd,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD,SAFD,MAEO;AACLD,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BU,IAA5B,EAAkCb,GAAlC,EAAuCc,QAAvC;AACD;AACF;AAbiC,KAApC;AAgBH,GA/BQ,EA+BN,EA/BM,CAAT;AAkCA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEG,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDADJ,EAEI,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH;AAED,IAAMD,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC7BF,EAAAA,SAAS,EAAE;AACPG,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,eAAe,EAAE,MAFV;AAGPC,IAAAA,UAAU,EAAE,QAHL;AAIPC,IAAAA,cAAc,EAAE;AAJT;AADkB,CAAlB,CAAf","sourcesContent":["import {StatusBar} from 'expo-status-bar';\nimport React, {useEffect, useState} from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\nimport {OrderWatcher, OrderWatcherClient} from \"./_proto/orderWatcher_pb_service\";\nimport {Request} from \"./_proto/orderWatcher_pb\";\nimport {grpc} from \"@improbable-eng/grpc-web\";\nimport {ReactNativeTransport} from '@improbable-eng/grpc-web-react-native-transport';\n\nexport default function App() {\n    const [messages, setMessages] = useState<Array<StreamMessage.AsObject>>([]);\n\n    const host = \"http://localhost:8080\";\n    const grpcClient = new OrderWatcherClient(host);\n\n\n    useEffect(() => {\n\n\n\n        (() => {\n            const customer = new Request()\n            customer.setId(1)\n            const orderStream = grpcClient.subscribe(customer);\n            orderStream.on(\"data\", (chunk) => {\n                const msg = (chunk as StreamMessage).toObject();\n                console.log(msg);\n                setMessages((prev) => [...prev, msg]);\n            });\n        })();\n\n        grpc.invoke(OrderWatcher.Subscribe, {\n          request: customer,\n          host: host,\n          transport: ReactNativeTransport({ withCredentials: false }),\n          onMessage: (message: any) => {\n            console.log(\"got book: \", message.toObject());\n          },\n          onEnd: (code: grpc.Code, msg: string | undefined, trailers: grpc.Metadata) => {\n            if (code == grpc.Code.OK) {\n              console.log(\"all ok\")\n            } else {\n              console.log(\"hit an error\", code, msg, trailers);\n            }\n          }\n        });\n\n    }, []);\n\n\n    return (\n        <View style={styles.container}>\n            <Text>Open up App.tsx to start working on your app!</Text>\n            <StatusBar style=\"auto\"/>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n});\n"]},"metadata":{},"sourceType":"module"}